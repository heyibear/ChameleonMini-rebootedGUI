name: Build ChameleonMini GUI

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2
    
    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'
    
    - name: Setup VSTest Platform
      uses: darenm/Setup-VSTest@v1
    
    - name: Restore NuGet packages
      run: |
        nuget restore ChameleonMiniGUI.sln -PackagesDirectory packages
    
    - name: Build solution
      run: |
        msbuild ChameleonMiniGUI.sln /p:Configuration=Release /p:Platform="Any CPU" /p:OutputPath=bin\Release\
        msbuild ChameleonMiniGUI.sln /p:Configuration=Debug /p:Platform="Any CPU" /p:OutputPath=bin\Debug\
    
    - name: Copy dependencies to output directory
      run: |
        # Copy HexBox DLL to Release
        Copy-Item "Be.Windows.Forms.HexBox\bin\Release\Be.Windows.Forms.HexBox.dll" "ChameleonMiniGUI\bin\Release\" -Force
        
        # Copy Crapto1Sharp DLL to Release
        Copy-Item "packages\Crapto1Sharp.1.2.2\lib\net45\Crapto1Sharp.dll" "ChameleonMiniGUI\bin\Release\" -Force
        
        # Copy DynamicExpresso DLL to Release
        Copy-Item "packages\DynamicExpresso.Core.2.0.0\lib\net461\DynamicExpresso.Core.dll" "ChameleonMiniGUI\bin\Release\" -Force
        
        # Copy HexBox DLL to Debug (use Debug version if available, otherwise Release)
        if (Test-Path "Be.Windows.Forms.HexBox\bin\Debug\Be.Windows.Forms.HexBox.dll") {
          Copy-Item "Be.Windows.Forms.HexBox\bin\Debug\Be.Windows.Forms.HexBox.dll" "ChameleonMiniGUI\bin\Debug\" -Force
        } else {
          Copy-Item "Be.Windows.Forms.HexBox\bin\Release\Be.Windows.Forms.HexBox.dll" "ChameleonMiniGUI\bin\Debug\" -Force
        }
        
        # Copy Crapto1Sharp DLL to Debug
        Copy-Item "packages\Crapto1Sharp.1.2.2\lib\net45\Crapto1Sharp.dll" "ChameleonMiniGUI\bin\Debug\" -Force
        
        # Copy DynamicExpresso DLL to Debug
        Copy-Item "packages\DynamicExpresso.Core.2.0.0\lib\net461\DynamicExpresso.Core.dll" "ChameleonMiniGUI\bin\Debug\" -Force
      shell: powershell
    
    - name: Verify build outputs
      run: |
        if (!(Test-Path "Be.Windows.Forms.HexBox\bin\Release\Be.Windows.Forms.HexBox.dll")) {
          throw "HexBox DLL not found"
        }
        if (!(Test-Path "ChameleonMiniGUI\bin\Release\ChameleonMiniGUI.exe")) {
          throw "Main executable not found"
        }
        Write-Host "Build verification passed" -ForegroundColor Green
      shell: powershell
    
    - name: Run tests (if available)
      run: |
        if (Test-Path "ChameleonTest\ChameleonTest.sln") {
          Write-Host "Running tests..." -ForegroundColor Yellow
          nuget restore ChameleonTest\ChameleonTest.sln -PackagesDirectory ChameleonTest\packages
          msbuild ChameleonTest\ChameleonTest.sln /p:Configuration=Release
          
          if (Test-Path "ChameleonTest\ChameleonTest\bin\Release\ChameleonTest.dll") {
            # Try to find VSTest.Console.exe in common locations
            $vstestPaths = @(
              "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe",
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe",
              "${env:ProgramFiles}\Microsoft Visual Studio\2022\Professional\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe",
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Professional\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe",
              "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe",
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"
            )
            
            $vstestExe = $null
            foreach ($path in $vstestPaths) {
              if (Test-Path $path) {
                $vstestExe = $path
                break
              }
            }
            
            if ($vstestExe) {
              Write-Host "Found VSTest at: $vstestExe" -ForegroundColor Green
              & "$vstestExe" "ChameleonTest\ChameleonTest\bin\Release\ChameleonTest.dll" --logger:console
            } else {
              Write-Host "VSTest.Console.exe not found, trying alternative method..." -ForegroundColor Yellow
              # Alternative: Use MSTest directly if available
              $mstestPaths = @(
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\MSTest.exe",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\MSTest.exe",
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\Professional\Common7\IDE\MSTest.exe",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Professional\Common7\IDE\MSTest.exe",
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\Common7\IDE\MSTest.exe",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Community\Common7\IDE\MSTest.exe"
              )
              
              $mstestExe = $null
              foreach ($path in $mstestPaths) {
                if (Test-Path $path) {
                  $mstestExe = $path
                  break
                }
              }
              
              if ($mstestExe) {
                Write-Host "Found MSTest at: $mstestExe" -ForegroundColor Green
                & "$mstestExe" /testcontainer:"ChameleonTest\ChameleonTest\bin\Release\ChameleonTest.dll"
              } else {
                Write-Host "Neither VSTest nor MSTest found. Tests will be skipped." -ForegroundColor Yellow
              }
            }
          }
        } else {
          Write-Host "No tests found, skipping test execution" -ForegroundColor Yellow
        }
      shell: powershell
      continue-on-error: true
    
    - name: Create release package
      run: |
        $releaseDir = "ChameleonMiniGUI\bin\Release"
        
        # Determine version from tag or use timestamp
        if ($env:GITHUB_REF -match "refs/tags/(.*)") {
          $version = $matches[1]
          $archiveName = "ChameleonMiniGUI-$version.zip"
        } else {
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $version = $timestamp
          $archiveName = "ChameleonMiniGUI-$timestamp.zip"
        }
        
        # Create zip archive
        Compress-Archive -Path "$releaseDir\*" -DestinationPath $archiveName -Force
        
        Write-Host "Created release package: $archiveName" -ForegroundColor Green
        
        # Set output for later steps
        echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
        echo "VERSION=$version" >> $env:GITHUB_ENV
      shell: powershell
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ChameleonMiniGUI-Build-${{ github.run_number }}
        path: |
          ChameleonMiniGUI/bin/Release/
          !ChameleonMiniGUI/bin/Release/*.pdb
        retention-days: 30
    
    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: ChameleonMiniGUI-Release-Package
        path: ChameleonMiniGUI-*.zip
        retention-days: 90
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ env.VERSION }}
        tag_name: ${{ env.VERSION }}
        body: |
          ## ChameleonMini GUI Release ${{ env.VERSION }}
          
          ### What's New
          - Automated build from tag ${{ env.VERSION }}
          - Includes all necessary dependencies
          
          ### Files
          - `${{ env.ARCHIVE_NAME }}` - Complete application package with all dependencies
          
          ### Installation
          1. Download the zip file
          2. Extract to your desired location
          3. Run `ChameleonMiniGUI.exe`
          
          ### System Requirements
          - Windows 7 or later
          - .NET Framework 4.6.1 or later
          
          ---
          Built automatically from commit ${{ github.sha }}
        files: |
          ${{ env.ARCHIVE_NAME }}
        draft: false
        prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
